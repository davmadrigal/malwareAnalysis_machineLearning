# Send Binaries located in the defined path to Cuckoo Sandbox for dynamic analysis
# PE files to be analyzed
# Start virtual environment
# Iterate over the directory. All binaries have the same name pattern: SampleXXX
# Sort all the binaries
# Send binary. Check status of the analysis, Timeout of 120 seconds to stop the analysis
# Execute with python3

import subprocess
import re
import time
import requests
import os
import sys

# Set the virtual environment name
ENV_NAME = "cuckoo-test"

# Activate the virtual environment
def activate_virtual_environment():
    subprocess.run(["source", "/usr/share/virtualenvwrapper/virtualenvwrapper.sh"], shell=True)
    subprocess.run(["workon", ENV_NAME], shell=True)

# Get user input to start from the beginning or resume from a specific file
def get_start_point():
    global file_name_resume, flag
    while True:
        start_from_beginning = input("Start from the beginning? (Y/N): ")
        if start_from_beginning == "Y":
            flag = True
            break
        elif start_from_beginning == "N":
            file_name_resume = input("Please input the file you wish to start from: ")
            break
        else:
            print("Please, enter Y/N")

# Get user input to specify the type of files (goodware or malware)
def get_file_type():
    while True:
        malware_or_goodware = input("Please enter type of file: goodware (0) or malware (1): ")
        if malware_or_goodware in ["0", "1"]:
            return malware_or_goodware
        else:
            print("Please, enter 1/0")

# Set the directory based on the user's input
def set_directory(malware_or_goodware):
    if malware_or_goodware == "0":
        return '/home/daleal/Descargas/pe-machine-learning-dataset/goodWareList'  # goodware
    else:
        return '/home/daleal/Descargas/pe-machine-learning-dataset/malwareList/samples'  # malware

# Function to check the status of the analysis task
def check_status():
    response = requests.post(url_api_cuckoo, headers={
        # Headers for the API request
    }, json={"task_ids": [int(task_id)]})
    status = response.json()["data"][task_id]["status"]
    return status

# Main function to send binaries to Cuckoo Sandbox and monitor the analysis
def send_binaries_to_cuckoo():
    activate_virtual_environment()
    get_start_point()
    malware_or_goodware = get_file_type()
    directory = set_directory(malware_or_goodware)

    lista = os.listdir(directory)
    lista.sort(key=lambda x: int(re.search(r"(\d+)", x).group(1)))

    url_api_cuckoo = "http://127.0.0.1:8080/analysis/api/tasks/info/"

    file_limit = "sample8000"

    for filename in lista:
        if filename == file_name_resume:
            flag = True
        if flag:
            if filename.startswith(file_limit):
                print(f"Finish with {file_limit}")
                sys.exit(1)

            file_path = os.path.join(directory, filename)

            # Run the binary in Cuckoo Sandbox and capture the output
            output = subprocess.check_output(["cuckoo", "submit", "--timeout", "120", "-o", "route=internet", file_path]).decode('utf-8')

            # Extract the task ID from the output using regex
            task_id_match = re.search(r'ID #(\d+)', output)
            task_id = task_id_match.group(1)

            print("Binary:", filename)
            print("Task ID:", task_id)

            # Monitor the analysis status until it's reported or the timeout is reached
            start_time = time.time()
            while True:
                status = check_status()
                if status == "reported":
                    print(f"Task {task_id} has been reported")
                    break
                if time.time() - start_time > 120:
                    print("Timeout: 120 seconds, break")
                    break
                time.sleep(5)

if __name__ == "__main__":
    send_binaries_to_cuckoo()

