# Send Binaires located in the defined path to cuckoo sandobox for dynamic analysis
# PE files to be anlyzed
# Start virtual environment
# Iterate over the directory. All binaries has the same name pattern. SampleXXX
# Sort all the binaries
# Send binary. Check status of the anlysis, Timeout of 120 seconds to stop the analysis
# Execute with python3

import subprocess
import re
import time
import requests
import os
import sys
import time

# Set the virtual environment name
ENV_NAME = "cuckoo-test"

# Activate the virtual environment
subprocess.run(["source", "/usr/share/virtualenvwrapper/virtualenvwrapper.sh"], shell=True)
subprocess.run(["workon", ENV_NAME], shell=True)

file_name_resume = ""
flag = False

while True:
    start_from_beginning = input("Start from the beginning? (Y/N): ")
    if start_from_beginning == "Y":
        flag = True
        break
    elif start_from_beginning == "N":
        file_name_resume = input("Please input the file you wish to start from: ")
        break
    else:
        print("Please, enter Y/N")

while True:
    malware_or_goodware = input("Please enter type of file: goodware (0) o malware (1): ")
    if malware_or_goodware in ["0", "1"]:
        break
    else:
        print("Please, enter 1/0")

#Set Path where malwares are placed
if malware_or_goodware == "0":
    directory = '/home/daleal/Descargas/pe-machine-learning-dataset/malwareList/samples'  # malware
else:
    directory = '/home/daleal/Descargas/pe-machine-learning-dataset/goodWareList'  # goodware



lista=os.listdir(directory)
r = re.compile(r"(\d+)")
lista.sort(key=lambda x: int(r.search(x).group(1)))

#file_name_dado = "sample1646.exe"  # Reemplaza "nombre_archivo_dado.exe" con el nombre del archivo dado

url_api_cuckoo = "http://127.0.0.1:8080/analysis/api/tasks/info/"

# FunciÃ³n para realizar la solicitud y capturar la respuesta
def check_status():
    response = requests.post(url_api_cuckoo, headers={
        "Host": "127.0.0.1:8080",
        "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:126.0) Gecko/20100101 Firefox/126.0",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Language": "es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3",
        "Accept-Encoding": "gzip, deflate, br, zstd",
        "Content-Type": "application/json",
        "X-CSRFToken": "vlpPaMHuhyZkB5TbharlyS14F4R2fZ1p",
        "X-Requested-With": "XMLHttpRequest",
        "Connection": "keep-alive",
        "Cookie": "csrftoken=vlpPaMHuhyZkB5TbharlyS14F4R2fZ1p",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin"
    }, json={"task_ids": [int(task_id)]})
    status = response.json()["data"][task_id]["status"]
    #print("Status:", status)
    return status


# Last file to be sent
file_limit="sample8000"

for filename in lista:
    if filename == file_name_resume:
            flag = True  # Activar la bandera
    if flag:
        if filename.startswith(file_limit):
            print(f"Finish with {file_limit}")
            sys.exit(1)

        file_path = os.path.join(directory, filename)
    
        # Run a Python script in the virtual environment and capture the output
        output = subprocess.check_output(["cuckoo", "submit", "--timeout", "120", "-o", "route=internet", file_path]).decode('utf-8')

        # Extract the task ID from the output using regex
        task_id_match = re.search(r'ID #(\d+)', output)
        task_id = task_id_match.group(1)

        # print the name
        print("Binary:", filename)
        # Print the task ID
        print("Task ID:", task_id)

        # Ejecutar el bucle hasta que el estado sea "stopped"
        start_time = time.time()
        while True:
            status = check_status()
            if status == "reported":
                print(f"Task {task_id} has been reported")
                break
                # Verificar si han pasado 120 segundos
            if time.time() - start_time > 120:
                print("Timout: 120 seconds, break")
                break
            time.sleep(5)
