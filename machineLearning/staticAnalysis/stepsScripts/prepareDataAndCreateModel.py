import numpy as np
import matplotlib.pyplot as plt
import sys
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import StandardScaler

# Lee el archivo y obtén las columnas
#features = pd.read_csv('staticfeature.txt', sep=':', header=None)
#col_names =[x.strip() for x in features[1].tolist()]

#Empecemos separando las caracterísitcas para entrenar y el target.

data = pd.read_csv('./staticAnalisys_train.csv')
x_train, y_train = data.drop(['2'], axis=1), data['2'].copy()

dataTest = pd.read_csv('./staticAnalisys_test.csv')
x_test, y_test = dataTest.drop(['2'], axis=1), dataTest['2'].copy()

print(x_train.head())
print(x_train.info())
print(y_train.head())

# ver si hay datos nulos
print(x_train.isnull().sum)

# todos los valores son FALSE, lo que quiero decir que no hay valores nulos
# no es necesario ejecutar el inputer, ya que no hay nulos ni missing values


imputer = SimpleImputer(strategy="median")
imputer.fit(x_train)
print(imputer.statistics_)
X = imputer.transform(x_train)
data_tr = pd.DataFrame(X, columns=x_train.columns, index=x_train.index)
print(data_tr.isnull().sum())


scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_tr)
data_prepared= pd.DataFrame(data_scaled, columns=data_tr.columns, index=data_tr.index)
print(data_prepared.describe())

print(data_prepared.shape)


t = np.linspace(-10, 10, 100)
sig = 1 / (1 + np.exp(-t))
plt.figure(figsize=(9, 3))
plt.plot([-10, 10], [0, 0], "k-")
plt.plot([-10, 10], [0.5, 0.5], "k:")
plt.plot([-10, 10], [1, 1], "k:")
plt.plot([0, 0], [-1.1, 1.1], "k-")
plt.plot(t, sig, "b-", linewidth=2, label=r"$\sigma(t) = \frac{1}{1 + e^{-t}}$")
plt.xlabel("t")
plt.legend(loc="upper left", fontsize=20)
plt.axis([-10, 10, -0.1, 1.1])
plt.show()

# Logistic Regression, crear el modelo
log_reg = LogisticRegression(solver="lbfgs", random_state=42)
log_reg.fit(data_prepared, y_train)

print("Model Coefficients: ", log_reg.coef_)

print("Model Intercept: ",log_reg.intercept_)


imputerTest = SimpleImputer(strategy="median")
imputerTest.fit(x_test)
print(imputerTest.statistics_)
X_test = imputerTest.transform(x_test)
data_tr_test = pd.DataFrame(X_test, columns=x_test.columns, index=x_test.index)
print(data_tr_test.isnull().sum())


scalerTest = StandardScaler()
data_scaled_test = scalerTest.fit_transform(data_tr_test)
data_prepared_test= pd.DataFrame(data_scaled_test, columns=data_tr_test.columns, index=data_tr_test.index)
print(data_prepared_test.describe())


# Predict responses
pred = log_reg.predict(data_prepared_test)
prediction = list(map(round, pred))

# Accuracy score
print('Test accuracy = ', accuracy_score(y_test, prediction))

# Confusion matrix
cm = confusion_matrix(y_test, prediction)
print ("Confusion Matrix : ", cm)
