import sys
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

PATH = "./DatasetReducedBalanced.csv"

# Read the file
def loadData(path=PATH):
  return pd.read_csv(path)


data = loadData()
# Get data type
print(data.info())
print(data.head())


# Remove the first columndd. Binary name
data_noName = data.drop(data.columns[0], axis=1)
#data_noName.info()
#print(data_noName.head())

# replace '' with 0
data_noName_noEmpty = data_noName.iloc[:,:].replace('', '0')
# Transform columns to numeric type. Algorithms don't know how to work with object types
data_noName_noEmpty= data_noName_noEmpty.iloc[:,:].apply(pd.to_numeric, errors='coerce')

data_noName_noEmpty.info()

# split the data by target, column[2] 0 goodware, 1 malware
x_train,x_test,y_train,y_test = train_test_split(data_noName_noEmpty, data_noName_noEmpty['2'], test_size=0.3, random_state=42)

print(x_train.head())
print(y_train.head())

num_attribs = list(x_train)

num_pipeline = Pipeline([
        ('imputer', SimpleImputer(strategy="median")),
        ('std_scaler', StandardScaler()),
    ])

full_pipeline = ColumnTransformer([
        ("num", num_pipeline, num_attribs)
    ])

data_prepared = full_pipeline.fit_transform(x_train)
print(data_prepared.shape)

# Logistic Regression, crear el modelo
log_reg = LogisticRegression(solver="lbfgs", random_state=42)
log_reg.fit(data_prepared, y_train)

print()
print("##### RESULTS FOR LINEAR REGRESSION #####")
print()
print("Model Coefficients: ", log_reg.coef_)
print("Model Intercept: ",log_reg.intercept_)

num_attribs_test = list(x_test)

num_pipeline_test = Pipeline([
        ('imputer', SimpleImputer(strategy="median")),
        ('std_scaler', StandardScaler()),
    ])

full_pipeline_test = ColumnTransformer([
        ("num", num_pipeline_test, num_attribs_test)
    ])

data_prepared_test = full_pipeline.transform(x_test)
print(data_prepared_test.shape)

# Predict responses
pred = log_reg.predict(data_prepared_test)
prediction = list(map(round, pred))

# Accuracy score
print('Test accuracy = ', accuracy_score(y_test, prediction))

# Confusion matrix
cm = confusion_matrix(y_test, prediction)
print ("Confusion Matrix : ", cm)
