import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score, f1_score, roc_curve
from sklearn.naive_bayes import GaussianNB

#PATH = "./DatasetReducedBalanced.csv"
PATH = "./DatasetMasGoodware.csv"

# Read the file
def loadData(path=PATH):
    return pd.read_csv(path)

data = loadData()

# Remove the first column. Binary name
data_noName = data.drop(data.columns[0], axis=1)

# Replace '' with 0
data_noName_noEmpty = data_noName.iloc[:, :].replace('', '0')
# Transform columns to numeric type. Algorithms don't know how to work with object types
data_noName_noEmpty = data_noName_noEmpty.iloc[:, :].apply(pd.to_numeric, errors='coerce')

# Split the data by target, column[2] 0 goodware, 1 malware
x_train, x_test, y_train, y_test = train_test_split(data_noName_noEmpty, data_noName_noEmpty['2'], test_size=0.3, random_state=42)

num_attribs = list(x_train)

num_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy="median")),
])

full_pipeline = ColumnTransformer([
    ("num", num_pipeline, num_attribs)
])

data_prepared = full_pipeline.fit_transform(x_train)

# Naive model
naiveBayes = GaussianNB()

# Validación cruzada
cv_scores = cross_val_score(naiveBayes, data_prepared, y_train, cv=5)  # 5-fold cross-validation
print("##### VALIDACIÓN CRUZADA #####")
print("Precisión en cada pliegue: ", cv_scores)
print("Precisión media: ", np.mean(cv_scores))

# Entrenamiento del modelo
naiveBayes.fit(data_prepared, y_train)

data_prepared_test = full_pipeline.transform(x_test)

print("##### RESULTADOS NAIVE: PREDICCIONES #####")
predNaive = naiveBayes.predict(data_prepared_test)
predictionNaive = list(map(round, predNaive))

# Accuracy score
print('Test accuracy Naive= ', accuracy_score(y_test, predictionNaive))

print("##### RESULTADOS NAIVE: MATRIZ DE CONFUSIÓN #####")
# Confusion matrix
cmNaive = confusion_matrix(y_test, predictionNaive)
print("Confusion Matrix NAIVE: ", cmNaive)

fig, ax = plt.subplots(figsize=(12, 12))
ax.imshow(cmNaive, cmap='Pastel1')
ax.grid(False)
ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted Goodware(0)', 'Predicted Malware(1)'))
ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual Goodware(0)', 'Actual Malware(1)'))
ax.set_ylim(1.5, -0.5)

for i in range(2):
    for j in range(2):
        ax.text(j, i, cmNaive[i, j], ha='center', va='center', color="red")
plt.show()

print("##### RESULTADOS NAIVE: REPORTES #####")
print(classification_report(y_test, predictionNaive, digits=5))
print("precision score: ", precision_score(y_test, predictionNaive))
print("recall score: ", recall_score(y_test, predictionNaive))
print("f1_score: ", f1_score(y_test, predictionNaive))

fpr, tpr, thresholds = roc_curve(y_test, predictionNaive)

def plot_roc_curve(fpr, tpr, label=None):
    plt.plot(fpr, tpr, linewidth=2, label=label)
    plt.plot([0, 1], [0, 1], 'k--')
    plt.axis([0, 1, 0, 1])
    plt.xlabel('FPR', fontsize=16)
    plt.ylabel('TPR', fontsize=16)
    plt.grid(True)

plt.figure(figsize=(8, 6))
plot_roc_curve(fpr, tpr)
plt.show()

