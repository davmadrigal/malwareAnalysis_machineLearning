import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (accuracy_score, confusion_matrix, classification_report,
                             precision_score, recall_score, f1_score, roc_curve, precision_recall_curve, auc)

# This script loads a dataset, preprocesses it, performs cross-validation,
# trains a logistic regression model, and evaluates its performance.

# path to the dataset 
PATH = "./DatasetNoBalancedMoreGoodware.csv"
#PATH = "./DatasetReducedBalanced.csv"

def load_data(path=PATH):
    """Load the dataset from the specified path"""
    return pd.read_csv(path)

def preprocess_data(data):
    """Preprocess the data by removing unnecessary columns and converting data types"""
    # Remove the first column (binary name)
    data_no_name = data.drop(data.columns[0], axis=1)
    
    # Replace empty strings with 0 and convert to numeric
    data_no_name_no_empty = data_no_name.replace('', '0')
    data_no_name_no_empty = data_no_name_no_empty.apply(pd.to_numeric, errors='coerce')
    
    return data_no_name_no_empty

def split_data(data):
    x = data.drop('2', axis=1)  # Removing family type
    y = data['2']
    x_train, x_test, y_train, y_test = train_test_split(
        x, y, test_size=0.3, random_state=42
    )
    return x_train, x_test, y_train, y_test

def create_pipeline(num_attribs):
    """Create a preprocessing pipeline for numeric attributes"""
    num_pipeline = Pipeline([
        ('imputer', SimpleImputer(strategy="median")),
    ])
    
    full_pipeline = ColumnTransformer([
        ("num", num_pipeline, num_attribs)
    ])
    
    return full_pipeline

def train_and_evaluate_model(pipeline, x_train, y_train):
    """Train the model and evaluate its performance using cross-validation"""
    data_prepared = pipeline.fit_transform(x_train)
    log_reg = LogisticRegression(solver="newton-cg", C=0.1, random_state=42, max_iter=200)
    
    # Perform cross validation
    scores = cross_val_score(log_reg, data_prepared, y_train, cv=5, scoring="accuracy")
    print("Cross-validation scores:", scores)
    print("Mean cross-validation score:", scores.mean())
    
    # Fit the model with all the data
    log_reg.fit(data_prepared, y_train)
    
    return log_reg

def make_predictions(model, pipeline, x_test):
    """Make the predictions on the test set"""
    data_prepared_test = pipeline.transform(x_test)
    preds = model.predict(data_prepared_test)
    return preds

def plot_confusion_matrix(cm):
    """Plot the confusion matrix"""
    fig, ax = plt.subplots(figsize=(12, 12))
    ax.imshow(cm, cmap='Pastel1')
    ax.grid(False)
    ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted Goodware(0)', 'Predicted Malware(1)'))
    ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual Goodware(0)', 'Actual Malware(1)'))
    ax.set_ylim(1.5, -0.5)

    for i in range(2):
        for j in range(2):
            ax.text(j, i, cm[i, j], ha='center', va='center', color="red")
    plt.show()

def plot_roc_curve(fpr, tpr):
    """Plot the ROC curve"""
    plt.plot(fpr, tpr, linewidth=2)
    plt.plot([0, 1], [0, 1], 'k--')
    plt.axis([0, 1, 0, 1])
    plt.xlabel('FPR', fontsize=16)
    plt.ylabel('TPR', fontsize=16)
    plt.grid(True)
    plt.show()

def plot_pr_curve(precision, recall):
    """Plot the Precision-Recall curve"""
    plt.figure(figsize=(8, 6))
    plt.plot(recall, precision, linewidth=2)
    plt.xlabel('Recall', fontsize=14)
    plt.ylabel('Precision', fontsize=14)
    plt.grid(True)
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.title('Precision-Recall Curve', fontsize=16)
    plt.show()

def main():
    """Main function to execute the workflow"""
    data = load_data()
    processed_data = preprocess_data(data)
    x_train, x_test, y_train, y_test = split_data(processed_data)
    
    num_attribs = list(x_train)
    pipeline = create_pipeline(num_attribs)
    
    model = train_and_evaluate_model(pipeline, x_train, y_train)
    
    preds = make_predictions(model, pipeline, x_test)
    test_accuracy = accuracy_score(y_test, preds)
    print("Test accuracy:", test_accuracy)
    
    cm = confusion_matrix(y_test, preds)
    print("Confusion Matrix:", cm)
    plot_confusion_matrix(cm)
    
    print("Classification Report:\n", classification_report(y_test, preds, digits=5))
    print("Precision score:", precision_score(y_test, preds))
    print("Recall score:", recall_score(y_test, preds))
    print("F1 score:", f1_score(y_test, preds))
    
    fpr, tpr, _ = roc_curve(y_test, preds)
    plot_roc_curve(fpr, tpr)

    precision, recall, _ = precision_recall_curve(y_test, preds)
    plot_pr_curve(precision, recall)
    auc_pr = auc(recall, precision)
    print("AUC-PR:", auc_pr)

if __name__ == "__main__":
    main()

